{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN Text Classification (DIY).ipynb_필기","version":"0.3.2","provenance":[{"file_id":"16tyCX7lT7H4d5AV-7KIp3A5xJuu9AKze","timestamp":1564639472045}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"TKtiON7SWo-W","colab_type":"text"},"source":["# CNN Text Classification Lab"]},{"cell_type":"markdown","metadata":{"id":"EEbjAYgOW6WB","colab_type":"text"},"source":["## Goal\n","본 실습의 목표는 Convolutional Neural Network을 이용하여 문장을 여러 카테고리 중 하나로 분류하는 모델을 만드는 것입니다. 또한, 미리 학습된 단어 벡터를 모델에 적용하는 방법도 배워볼 것입니다."]},{"cell_type":"markdown","metadata":{"id":"ROSacgMz6V7r","colab_type":"text"},"source":["## Dataset\n","\n","학습 데이터는 Stanford 대학에서 구성한 공손함 데이터를 사용하겠습니다."]},{"cell_type":"code","metadata":{"id":"N1YfHPu-7t1f","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":73},"outputId":"f76ffaa9-5d23-4e8b-e088-2dd29c26ba12","executionInfo":{"status":"ok","timestamp":1564639728343,"user_tz":-540,"elapsed":3366,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["import os\n","import pandas as pd\n","import numpy as np\n","from collections import Counter\n","import nltk\n","import matplotlib.pyplot as plt\n","from nltk.tokenize import word_tokenize\n","import tensorflow as tf\n","from tensorflow.python.keras.preprocessing import sequence\n","from tensorflow import keras\n","\n","nltk.download('punkt')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"q2EW2UKy6elS","colab_type":"code","colab":{}},"source":["if not os.path.exists(\"Stanford_politeness_corpus.zip\"):\n","  !wget http://www.cs.cornell.edu/~cristian/Politeness_files/Stanford_politeness_corpus.zip\n","\n","if not os.path.exists(\"Stanford_politeness_corpus/wikipedia.annotated.csv\"):\n","  !unzip Stanford_politeness_corpus.zip"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PLxkMzaN9G02","colab_type":"code","colab":{}},"source":["def load_data(data_file):\n","  data = pd.read_csv(data_file)\n","\n","  # Only use the top quartile as polite, and bottom quartile as impolite. Discard the rest.\n","  quantiles = data[\"Normalized Score\"].quantile([0.25, 0.5, 0.75])\n","  print(quantiles)\n","\n","  for i in range(len(data)):\n","    score = data.loc[i, \"Normalized Score\"]\n","    if score <= quantiles[0.25]:\n","      # Bottom quartile (impolite).\n","      data.loc[i, \"Normalized Score\"] = 0\n","    elif score >= quantiles[0.75]:\n","      # Top quartile (polite).\n","      data.loc[i, \"Normalized Score\"] = 1\n","    else:\n","      # Neutral.\n","      data.loc[i, \"Normalized Score\"] = 2\n","\n","  data[\"Normalized Score\"] = data[\"Normalized Score\"].astype(int)\n","\n","  # Discard neutral examples.\n","  data = data[data[\"Normalized Score\"] < 2]\n","  data = data.sample(frac=1).reset_index(drop=True)\n","\n","  return data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YaI1jGtMWOye","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":465},"outputId":"c0b93e30-8e8e-4996-fe20-da91c669992c","executionInfo":{"status":"ok","timestamp":1564639809139,"user_tz":-540,"elapsed":2856,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["data = load_data(\"Stanford_politeness_corpus/wikipedia.annotated.csv\")\n","pd.set_option('display.max_columns', None)\n","\n","print(data.head())"],"execution_count":5,"outputs":[{"output_type":"stream","text":["0.25   -0.442633\n","0.50    0.052339\n","0.75    0.514399\n","Name: Normalized Score, dtype: float64\n","   Community      Id                                            Request  \\\n","0  Wikipedia  319340  Thank you very much for your kind comments but...   \n","1  Wikipedia  329143  I can't remember if I asked/checked to see if ...   \n","2  Wikipedia  621917  Those of us who've been here the whole time ar...   \n","3  Wikipedia  621849  Quite welcome. Doesn't Huggle use rollback whe...   \n","4  Wikipedia  280602  I only used approved templates.  If they are n...   \n","\n","   Score1  Score2  Score3  Score4  Score5         TurkId1         TurkId2  \\\n","0      20      21       6      21      20   AYG3MF094634L  A302M81U0HM7RJ   \n","1      13       5      12      17       9  A2UFD1I8ZO1V4G  A1W2G1N4BDF2DW   \n","2      16      21      15      21      20   AYG3MF094634L  A3KVLFBRO8X2MZ   \n","3      21       5      13      17      21  A2VMJFBCB921NI   AJSVV9WS1SF2I   \n","4       9      15      10       1      13  A233ONYNWKDIYF   ARYGQ46IMW8AU   \n","\n","          TurkId3         TurkId4         TurkId5  Normalized Score  \n","0  A3TFQK7QK8X6LM  A34BMGP23XTAMN  A1HHQL4N00WU03                 1  \n","1  A28TXBSZPWMEU9   AIPK94CUWL45W  A3IHLWMZNBLUR4                 0  \n","2  A3EJ5TT2ZGBIDA  A1DTQSIIYIZL62  A2WZQ92N4809N1                 1  \n","3   AVV4KDLSDAS9E  A1F4D2PZ7NNWTL  A1Y3Z92RE62NPS                 1  \n","4  A1F4D2PZ7NNWTL  A3TFQK7QK8X6LM  A1DTQSIIYIZL62                 0  \n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LbrRF2ER6oay","colab_type":"text"},"source":["다음으로 할 일은 사전을 구성하는 것입니다.\n","\n","\n","신경망의 입력으로 사용하기 위해서는 문장을 숫자로 바꿔야 하는데, 사전의 역할은 단어를 숫자로, 숫자를 단어로 바꿔주는 것입니다.\n","\n","여기서 빠른 계산을 위해 dictionary 자료 구조를 사용하는 것이 일반적입니다.\n","\n","\n","\n","1.   문장들을 소문자로 바꾸고, tokenization (nltk.tokenize 패키지의 word_tokenize  함수 활용)\n","2.   전체 데이터에서 각 토큰들의 등장 빈도 확인 (collections 패키지의 Counter  클래스 활용)\n","3.   가장 등장 빈도가 높은 단어를 vocab_size 만큼 선택 (Counter의 most_common 함수 활용)\n","4.   각각의 단어에 고유한 숫자 부여. 이때, 0번째 토큰은 \"<PAD>\", 1번째 토큰은 \"<OOV>\" 할당\n","5.   토큰 -> 숫자 변환을 위한 dictionary (word_index 변수에 할당)와, 숫자 -> 토큰 변환을 위한 dictionary (word_inverted_index 변수에 할당) 생성\n","  \n","  \n","\n"]},{"cell_type":"code","metadata":{"id":"TwFWKLFZ3hTJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"outputId":"38745b86-816e-42aa-aeba-f8974734ba10","executionInfo":{"status":"ok","timestamp":1564641220846,"user_tz":-540,"elapsed":847,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["[i for i in word_index.items()][1][1]"],"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"RN4C5ewLW9AN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":484},"outputId":"42f8e2cc-936c-486c-fe53-ead8a27b0417","executionInfo":{"status":"ok","timestamp":1564641545655,"user_tz":-540,"elapsed":1368,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["vocab_size = 5000 # 등장 빈도가 높은 5000개의 단어.\n","# we assign the first indices in the vocabulary to special tokens that we use\n","# for padding, and for indicating unknown words\n","pad_id = 0 # 패딩 토큰에 0을 할당\n","oov_id = 1 # oov에는 1번을 할당.\n","index_offset = 1 # 2부터 들어갈 수 있게 밀어 줄 것.\n","\n","def make_vocab(sentences):\n","  word_counter = Counter() # 파이썬 collections에 있고 구조는 dict.\n","  # 키가 없으면 count를 0을 할당하는 dictionary. 하나 있으면 1을 할당함.\n","  \n","  for sent in sentences:\n","    tokens = word_tokenize(sent.lower())\n","    # word_counter.update(tokens)\n","    for tok in tokens:\n","      word_counter[tok] += 1\n","      \n","  # Your code here\n","  # 1. 전부 소문자 처리\n","  # 2. nltk word_tokenize로 문장을 쪼개라\n","  \n","  most_common = word_counter.most_common() # count중에서 가장 빈도가 높은 순으로 정렬\n","  print(\"고빈도 단어:\")\n","  for k, v in most_common[:10]:\n","    print(k, \": \", v)\n","  \n","  vocab = {\n","      '<PAD>': pad_id,\n","      '<OOV>': oov_id\n","  }\n","  \n","  index = index_offset\n","  \n","  #for i, (word,cnt) in enumerate(most_common,start=index_offset+1):\n","  #  vocab[word] = i\n","  #  if len(vocab) >= vocab_size\n","  \n","  for key in most_common[:vocab_size]:\n","    index += 1\n","    vocab[key[0]] = index\n","  \n","  \n","  # 나머지 단어를 아이디를 할당해서 저장해라.\n","  \n","  return vocab\n","  \n","sentences = data[\"Request\"].tolist() # 배열로 쭉 들어간다.\n","word_index = make_vocab(sentences)\n","word_inverted_index = {} # 숫자에서 문장으로 가는 dict을 만들면 된다.\n","\n","# word_inverted_index = {v:k for k,v in word_index.items()}\n","\n","for item in word_index.items():\n","  word_inverted_index[item[1]] = item[0]\n","\n","# Your code here\n","\n","print(\"\\n단어 사전:\")\n","for i in range(0, 10):\n","  print(i, word_inverted_index[i])\n","  \n","print(\"\\n단어 사전 크기: \", len(word_index))\n","\n","# 빠른 계산을 위해서\n","# 문장 -> 숫자 dictionary를 사용\n","# 숫자 -> 문장 dict나 list를 사용하면 된다."],"execution_count":68,"outputs":[{"output_type":"stream","text":["고빈도 단어:\n","? :  2714\n","the :  2499\n","you :  2235\n",", :  2204\n","to :  1695\n","i :  1679\n",". :  1642\n","a :  1125\n","it :  963\n","that :  936\n","\n","단어 사전:\n","0 <PAD>\n","1 <OOV>\n","2 ?\n","3 the\n","4 you\n","5 ,\n","6 to\n","7 i\n","8 .\n","9 a\n","\n","단어 사전 크기:  5002\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rTjNICZN2Ram","colab_type":"code","colab":{}},"source":["sentences = data[\"Request\"].tolist() # 배열로 쭉 들어간다.\n","word_index = make_vocab(sentences)\n","sentences[0].lower()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z3fnvMya2CLN","colab_type":"code","colab":{}},"source":["vocab = {\n","      '<PAD>': pad_id,\n","      '<OOV>': oov_id\n","  }\n","vocab['hello'] = index_offset\n","vocab"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6MtbsvZh0hZt","colab_type":"code","colab":{}},"source":["word_counter = Counter()\n","sentences = data[\"Request\"].tolist() \n","word_counter[word_tokenize(sentences[0])[0]] +=1\n","[key for key in word_counter]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vh3O9aHD7HLf","colab_type":"text"},"source":["사전이 잘 구성되었는지 시험해보겠습니다. \n","\n","사전이 잘 구성되고, 각각의 사전이 word_index 변수와 word_inverted_index 변수에 할당되었다면 문장이 숫자로 변환되었다가 다시 원래 문장으로 돌아오는 것을 확인하실 수 있습니다."]},{"cell_type":"code","metadata":{"id":"WdBgH74TcmNk","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":93},"outputId":"b43dbfb6-87eb-49bc-8214-932e85d626c8","executionInfo":{"status":"ok","timestamp":1564641548503,"user_tz":-540,"elapsed":364,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["def index_to_text(indexes):\n","  return ' '.join([word_inverted_index[i] for i in indexes])\n","  \n","def text_to_index(text):\n","  tokens = word_tokenize(text.lower())\n","  indexes = []\n","  for tok in tokens:\n","    if tok in word_index:\n","      indexes.append(word_index[tok])\n","    else:\n","      indexes.append(oov_id)\n","      \n","  return indexes\n","\n","print(\"원본: \", sentences[0])\n","ids = text_to_index(sentences[0])\n","print(\"문자 -> 숫자: \", ids)\n","print(\"숫자 -> 문자: \", index_to_text(ids))"],"execution_count":69,"outputs":[{"output_type":"stream","text":["원본:  Thank you very much for your kind comments but I don't recall if or when I made these contributions. Are you sure it was me?\n","문자 -> 숫자:  [139, 4, 166, 157, 19, 29, 296, 222, 41, 7, 18, 24, 1083, 35, 44, 89, 7, 117, 154, 515, 8, 28, 4, 145, 10, 32, 38, 2]\n","숫자 -> 문자:  thank you very much for your kind comments but i do n't recall if or when i made these contributions . are you sure it was me ?\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Eb0Zk0YY7MiD","colab_type":"text"},"source":["다음으로, 숫자로 바뀐 문장들을 학습 데이터로 사용할 수 있도록 변형하겠습니다.\n","\n","\n","\n","1.   모든 문장들을 동일한 길이가 되도록 padding 처리하거나 자름 (tensorflow.python.keras.preprocessing.sequence 패키지의 pad_sequence 함수 활용)\n","2.   데이터의 일부(10%)를 테스트 데이터로 분리\n","\n"]},{"cell_type":"code","metadata":{"id":"MQfHyY0GhvBJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":92},"outputId":"e827566c-9677-427a-86cf-61a39029f5c9","executionInfo":{"status":"ok","timestamp":1564643759919,"user_tz":-540,"elapsed":1706,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["x_variable = [text_to_index(text) for text in sentences]\n","# Your code here\n","\n","sentence_size = 200 # 모든 문장을 200 token으로 통일\n","# 200개 넘으면 200개로 자른다.\n","# 아닌건 패딩\n","# 하나의 넘파이로 만들기 위해서임. but 배치단위로 해도되긴함. 문장단위로 하기도 한다\n","\n","# keras 함수. x_variable은 입력 데이터, 길이가 각각이여서 variable이라고 정함.\n","# 앞에서 만든 text to index를 이용해서 숫자를 넣으면 됨. 배열 속 배열\n","# 200단어로 maxlen 자르셈\n","# 200단어가 넘어가면 truncating은 post는 뒷부분을 자른다는 것 pre는 앞단어를 자르는 것임.\n","# padding도 post는 뒤에다가 붙이는 것\n","# value는 어느 값으로 패딩할 것인지 정하는 것인지.\n","x_padded = sequence.pad_sequences(x_variable,\n","                                 maxlen=sentence_size,\n","                                 truncating='post',\n","                                 padding='post',\n","                                 value=pad_id)\n","\n","bound = int(len(x_padded)*0.1)\n","test_inputs = np.array(x_padded[:bound])\n","train_inputs = np.array(x_padded[bound:])\n","\n","# Your code here\n","# 학습데이터와 train data를 나눌 것임.\n","# 10% 데이터를 시험데이터로 따로 빼두기 (9:1)로 쪼개기\n","\n","\n","# 공손함, 불손함 정답데이터를 넣고, 나온 파이썬 리스트를 numpy 행렬로 변형.\n","# 또한 ys도 1:9로 test, train 데이터로 나눠라.\n","\n","ys = np.array(data[\"Normalized Score\"].tolist())\n","\n","test_labels = ys[:bound]\n","train_labels = ys[bound:]\n","\n","# Your code here\n","\n","print(\"test_inputs shape: \", test_inputs.shape)\n","print(\"train_inputs shape: \", train_inputs.shape)\n","print(\"test_labels shape: \", test_labels.shape)\n","print(\"train_labels shape: \", train_labels.shape)"],"execution_count":79,"outputs":[{"output_type":"stream","text":["test_inputs shape:  (217, 200)\n","train_inputs shape:  (1961, 200)\n","test_labels shape:  (217,)\n","train_labels shape:  (1961,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ozQMjbi084Cm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"outputId":"d8a5b89a-66e8-46c7-9b07-dbde9ae12867","executionInfo":{"status":"ok","timestamp":1564642370517,"user_tz":-540,"elapsed":683,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["int(len(x_variable)*0.9)"],"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1960"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"code","metadata":{"id":"sUcTR2a-FTLk","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"outputId":"08f499b2-c232-4fc6-b424-0fff94602909","executionInfo":{"status":"ok","timestamp":1564644568813,"user_tz":-540,"elapsed":846,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["test_inputs.shape[1]"],"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/plain":["200"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"markdown","metadata":{"id":"7ftSUTOB98N_","colab_type":"text"},"source":["이제 모델을 설계할 차례입니다. \n","\n","keras.Sequential을 이용하여 CNN 모델을 구성해봅시다. Sequential 모델을 사용하려면 동일한 크기의 필터만 사용할 수 있습니다.\n","\n","참고 함수: \n","\n","keras.layers.Embedding\n","\n","https://www.tensorflow.org/api_docs/python/tf/keras/layers/Embedding\n","\n","keras.layers.Conv1D\n","\n","https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv1D\n","\n","keras.layers.GlobalMaxPool1D\n","\n","https://www.tensorflow.org/api_docs/python/tf/keras/layers/GlobalMaxPool1D\n","\n","keras.layers.Dense\n","\n","https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense\n","\n"]},{"cell_type":"code","metadata":{"id":"dlsrBpQZmUFW","colab_type":"code","colab":{}},"source":["model = keras.Sequential([\n","    # 단어 아이디 별로 해당하는 벡터를 가져오는 것.\n","    # 각 문장별로 단어 벡터가 나오게 된다.\n","    # 한국어는 형태소별로 하게된다. 그 이후부터는 동일하게 진행하면 된다.\n","    \n","    \n","    # 정답\n","    #keras.layers.Embedding(input_dim = vocab_size, output_dim = 50),\n","    #keras.layers.Conv1D(filters = 32,kernel_size = 3,padding = \"same\",activation=tf.nn.relu),\n","    #keras.layers.GlobalMaxPool1D(),\n","    #keras.layers.Dense(2, activation=tf.nn.softmax)\n","    \n","    # 세로로만 움직이게 해줌.\n","    keras.layers.Embedding(input_dim = train_inputs.shape[1], output_dim = 300),\n","    keras.layers.Conv1D(filters = 100,kernel_size = 4,activation=tf.nn.relu),\n","    keras.layers.Dropout(rate=0.2),\n","    keras.layers.GlobalMaxPool1D(),\n","    \n","    keras.layers.Dense(2, activation=tf.nn.softmax)\n","])\n","\n","# Sequential 필터를 통일해서 사용하는 것으로 하겠다."],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QI6aCoD9-jNE","colab_type":"text"},"source":["아래는 학습 결과를 시각화해주고, 성능을 측정하는 함수들입니다."]},{"cell_type":"code","metadata":{"id":"hZG1KkAOo_ZY","colab_type":"code","colab":{}},"source":["def plot_loss(history):\n","  plt.figure(figsize=(6,5))\n","  val = plt.plot(history.epoch, history.history['val_loss'],\n","                 '--', label='Test')\n","  plt.plot(history.epoch, history.history['loss'], color=val[0].get_color(),\n","           label='Train')\n","\n","  plt.xlabel('Epochs')\n","  plt.ylabel(\"Loss\")\n","  plt.legend()\n","\n","  plt.xlim([0,max(history.epoch)])\n","  \n","def eval_model(model):\n","  test_loss, test_acc = model.evaluate(test_inputs, test_labels)\n","  print('Test accuracy:', test_acc)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tVGrEUEu-oXv","colab_type":"text"},"source":["만들어진 모델을 학습시켜보겠습니다."]},{"cell_type":"code","metadata":{"id":"-hPsLLFIot0y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":787},"outputId":"d0e2c6ed-699c-4e33-c194-c276c603edfe","executionInfo":{"status":"ok","timestamp":1564646957345,"user_tz":-540,"elapsed":5120,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["model.compile(optimizer='adam', \n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","history = model.fit(train_inputs,\n","          train_labels,\n","          epochs=10,\n","          validation_data=(test_inputs, test_labels)\n","         )\n","\n","plot_loss(history)\n","eval_model(model)"],"execution_count":146,"outputs":[{"output_type":"stream","text":["Train on 1961 samples, validate on 217 samples\n","Epoch 1/10\n","1961/1961 [==============================] - 1s 408us/sample - loss: 0.0690 - acc: 0.9857 - val_loss: 0.3769 - val_acc: 0.8525\n","Epoch 2/10\n","1961/1961 [==============================] - 0s 156us/sample - loss: 0.0430 - acc: 0.9954 - val_loss: 0.4012 - val_acc: 0.8387\n","Epoch 3/10\n","1961/1961 [==============================] - 0s 147us/sample - loss: 0.0408 - acc: 0.9924 - val_loss: 0.4070 - val_acc: 0.8802\n","Epoch 4/10\n","1961/1961 [==============================] - 0s 138us/sample - loss: 0.0262 - acc: 0.9980 - val_loss: 0.4159 - val_acc: 0.8618\n","Epoch 5/10\n","1961/1961 [==============================] - 0s 148us/sample - loss: 0.0206 - acc: 0.9985 - val_loss: 0.4599 - val_acc: 0.8710\n","Epoch 6/10\n","1961/1961 [==============================] - 0s 145us/sample - loss: 0.0152 - acc: 0.9990 - val_loss: 0.4456 - val_acc: 0.8894\n","Epoch 7/10\n","1961/1961 [==============================] - 0s 141us/sample - loss: 0.0138 - acc: 0.9990 - val_loss: 0.4764 - val_acc: 0.8756\n","Epoch 8/10\n","1961/1961 [==============================] - 0s 141us/sample - loss: 0.0107 - acc: 0.9990 - val_loss: 0.4840 - val_acc: 0.8756\n","Epoch 9/10\n","1961/1961 [==============================] - 0s 140us/sample - loss: 0.0086 - acc: 1.0000 - val_loss: 0.5101 - val_acc: 0.8525\n","Epoch 10/10\n","1961/1961 [==============================] - 0s 148us/sample - loss: 0.0068 - acc: 1.0000 - val_loss: 0.5186 - val_acc: 0.8756\n","217/217 [==============================] - 0s 66us/sample - loss: 0.5186 - acc: 0.8756\n","Test accuracy: 0.875576\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"pCaixZUv-tjb","colab_type":"text"},"source":["## Pretrained word vectors\n","\n","이번에는 만들어진 모델에 미리 학습된 단어 벡터를 적용해보겠습니다.\n","\n","단어 벡터는 GloVe 벡터를 사용할 것입니다.\n","\n","벡터 파일을 다운로드 받고 압축을 풀어보겠습니다.\n","\n","파일이 어떻게 구성되어 있는지 볼까요?"]},{"cell_type":"code","metadata":{"id":"UM6dSiL7rXut","colab_type":"code","outputId":"3c252ac3-455a-4e78-be9d-e450a8fff7cb","executionInfo":{"status":"ok","timestamp":1564646042354,"user_tz":-540,"elapsed":37662,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}},"colab":{"base_uri":"https://localhost:8080/","height":691}},"source":["if not os.path.exists('glove.6B.zip'):\n","    ! wget http://nlp.stanford.edu/data/glove.6B.zip\n","if not os.path.exists('glove.6B.50d.txt'):\n","    ! unzip glove.6B.zip\n","    \n","! head glove.6B.50d.txt\n","\n","# 6B : 60억 빌런\n","# 50d : 50차원 벡터로 나온다.\n","# 100d, 200d, 300d"],"execution_count":125,"outputs":[{"output_type":"stream","text":["--2019-08-01 07:53:23--  http://nlp.stanford.edu/data/glove.6B.zip\n","Resolving nlp.stanford.edu (nlp.stanford.edu)... 171.64.67.140\n","Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:80... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://nlp.stanford.edu/data/glove.6B.zip [following]\n","--2019-08-01 07:53:23--  https://nlp.stanford.edu/data/glove.6B.zip\n","Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: http://downloads.cs.stanford.edu/nlp/data/glove.6B.zip [following]\n","--2019-08-01 07:53:23--  http://downloads.cs.stanford.edu/nlp/data/glove.6B.zip\n","Resolving downloads.cs.stanford.edu (downloads.cs.stanford.edu)... 171.64.64.22\n","Connecting to downloads.cs.stanford.edu (downloads.cs.stanford.edu)|171.64.64.22|:80... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 862182613 (822M) [application/zip]\n","Saving to: ‘glove.6B.zip’\n","\n","glove.6B.zip        100%[===================>] 822.24M  64.8MB/s    in 13s     \n","\n","2019-08-01 07:53:36 (63.7 MB/s) - ‘glove.6B.zip’ saved [862182613/862182613]\n","\n","Archive:  glove.6B.zip\n","  inflating: glove.6B.50d.txt        \n","  inflating: glove.6B.100d.txt       \n","  inflating: glove.6B.200d.txt       \n","  inflating: glove.6B.300d.txt       \n","the 0.418 0.24968 -0.41242 0.1217 0.34527 -0.044457 -0.49688 -0.17862 -0.00066023 -0.6566 0.27843 -0.14767 -0.55677 0.14658 -0.0095095 0.011658 0.10204 -0.12792 -0.8443 -0.12181 -0.016801 -0.33279 -0.1552 -0.23131 -0.19181 -1.8823 -0.76746 0.099051 -0.42125 -0.19526 4.0071 -0.18594 -0.52287 -0.31681 0.00059213 0.0074449 0.17778 -0.15897 0.012041 -0.054223 -0.29871 -0.15749 -0.34758 -0.045637 -0.44251 0.18785 0.0027849 -0.18411 -0.11514 -0.78581\n",", 0.013441 0.23682 -0.16899 0.40951 0.63812 0.47709 -0.42852 -0.55641 -0.364 -0.23938 0.13001 -0.063734 -0.39575 -0.48162 0.23291 0.090201 -0.13324 0.078639 -0.41634 -0.15428 0.10068 0.48891 0.31226 -0.1252 -0.037512 -1.5179 0.12612 -0.02442 -0.042961 -0.28351 3.5416 -0.11956 -0.014533 -0.1499 0.21864 -0.33412 -0.13872 0.31806 0.70358 0.44858 -0.080262 0.63003 0.32111 -0.46765 0.22786 0.36034 -0.37818 -0.56657 0.044691 0.30392\n",". 0.15164 0.30177 -0.16763 0.17684 0.31719 0.33973 -0.43478 -0.31086 -0.44999 -0.29486 0.16608 0.11963 -0.41328 -0.42353 0.59868 0.28825 -0.11547 -0.041848 -0.67989 -0.25063 0.18472 0.086876 0.46582 0.015035 0.043474 -1.4671 -0.30384 -0.023441 0.30589 -0.21785 3.746 0.0042284 -0.18436 -0.46209 0.098329 -0.11907 0.23919 0.1161 0.41705 0.056763 -6.3681e-05 0.068987 0.087939 -0.10285 -0.13931 0.22314 -0.080803 -0.35652 0.016413 0.10216\n","of 0.70853 0.57088 -0.4716 0.18048 0.54449 0.72603 0.18157 -0.52393 0.10381 -0.17566 0.078852 -0.36216 -0.11829 -0.83336 0.11917 -0.16605 0.061555 -0.012719 -0.56623 0.013616 0.22851 -0.14396 -0.067549 -0.38157 -0.23698 -1.7037 -0.86692 -0.26704 -0.2589 0.1767 3.8676 -0.1613 -0.13273 -0.68881 0.18444 0.0052464 -0.33874 -0.078956 0.24185 0.36576 -0.34727 0.28483 0.075693 -0.062178 -0.38988 0.22902 -0.21617 -0.22562 -0.093918 -0.80375\n","to 0.68047 -0.039263 0.30186 -0.17792 0.42962 0.032246 -0.41376 0.13228 -0.29847 -0.085253 0.17118 0.22419 -0.10046 -0.43653 0.33418 0.67846 0.057204 -0.34448 -0.42785 -0.43275 0.55963 0.10032 0.18677 -0.26854 0.037334 -2.0932 0.22171 -0.39868 0.20912 -0.55725 3.8826 0.47466 -0.95658 -0.37788 0.20869 -0.32752 0.12751 0.088359 0.16351 -0.21634 -0.094375 0.018324 0.21048 -0.03088 -0.19722 0.082279 -0.09434 -0.073297 -0.064699 -0.26044\n","and 0.26818 0.14346 -0.27877 0.016257 0.11384 0.69923 -0.51332 -0.47368 -0.33075 -0.13834 0.2702 0.30938 -0.45012 -0.4127 -0.09932 0.038085 0.029749 0.10076 -0.25058 -0.51818 0.34558 0.44922 0.48791 -0.080866 -0.10121 -1.3777 -0.10866 -0.23201 0.012839 -0.46508 3.8463 0.31362 0.13643 -0.52244 0.3302 0.33707 -0.35601 0.32431 0.12041 0.3512 -0.069043 0.36885 0.25168 -0.24517 0.25381 0.1367 -0.31178 -0.6321 -0.25028 -0.38097\n","in 0.33042 0.24995 -0.60874 0.10923 0.036372 0.151 -0.55083 -0.074239 -0.092307 -0.32821 0.09598 -0.82269 -0.36717 -0.67009 0.42909 0.016496 -0.23573 0.12864 -1.0953 0.43334 0.57067 -0.1036 0.20422 0.078308 -0.42795 -1.7984 -0.27865 0.11954 -0.12689 0.031744 3.8631 -0.17786 -0.082434 -0.62698 0.26497 -0.057185 -0.073521 0.46103 0.30862 0.12498 -0.48609 -0.0080272 0.031184 -0.36576 -0.42699 0.42164 -0.11666 -0.50703 -0.027273 -0.53285\n","a 0.21705 0.46515 -0.46757 0.10082 1.0135 0.74845 -0.53104 -0.26256 0.16812 0.13182 -0.24909 -0.44185 -0.21739 0.51004 0.13448 -0.43141 -0.03123 0.20674 -0.78138 -0.20148 -0.097401 0.16088 -0.61836 -0.18504 -0.12461 -2.2526 -0.22321 0.5043 0.32257 0.15313 3.9636 -0.71365 -0.67012 0.28388 0.21738 0.14433 0.25926 0.23434 0.4274 -0.44451 0.13813 0.36973 -0.64289 0.024142 -0.039315 -0.26037 0.12017 -0.043782 0.41013 0.1796\n","\" 0.25769 0.45629 -0.76974 -0.37679 0.59272 -0.063527 0.20545 -0.57385 -0.29009 -0.13662 0.32728 1.4719 -0.73681 -0.12036 0.71354 -0.46098 0.65248 0.48887 -0.51558 0.039951 -0.34307 -0.014087 0.86488 0.3546 0.7999 -1.4995 -1.8153 0.41128 0.23921 -0.43139 3.6623 -0.79834 -0.54538 0.16943 -0.82017 -0.3461 0.69495 -1.2256 -0.17992 -0.057474 0.030498 -0.39543 -0.38515 -1.0002 0.087599 -0.31009 -0.34677 -0.31438 0.75004 0.97065\n","'s 0.23727 0.40478 -0.20547 0.58805 0.65533 0.32867 -0.81964 -0.23236 0.27428 0.24265 0.054992 0.16296 -1.2555 -0.086437 0.44536 0.096561 -0.16519 0.058378 -0.38598 0.086977 0.0033869 0.55095 -0.77697 -0.62096 0.092948 -2.5685 -0.67739 0.10151 -0.48643 -0.057805 3.1859 -0.017554 -0.16138 0.055486 -0.25885 -0.33938 -0.19928 0.26049 0.10478 -0.55934 -0.12342 0.65961 -0.51802 -0.82995 -0.082739 0.28155 -0.423 -0.27378 -0.007901 -0.030231\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xhv_Sbm4--m9","colab_type":"text"},"source":["GloVe 벡터를 불러와서 임베딩 행렬을 초기화해보겠습니다.\n","\n","\n","\n","1.   GloVe 파일을 읽고, 각 줄에서 단어(1번째 토큰)와 벡터를 이루는 숫자들(2번째 이후 토큰들)을 분리\n","2.   벡터를 이루는 숫자들을 numpy 행렬로 변환 (numpy의 asarray 함수 활용)\n","3.   단어와 벡터를 연결하는 dictionary 자료구조 구성 (단어 -> 벡터)\n","4.   모든 단어들에 대한 임베딩 행렬을 무작위로 생성 (vocab_size X 50 크기의 numpy 행렬)\n","5.   임베딩 행렬에서, GloVe 벡터가 존재하는 단어들만 해당 GloVe 벡터로 대체\n","\n"]},{"cell_type":"code","metadata":{"id":"F338O36WMYfK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"b4857aa3-a1cf-49a2-e7e2-a41bc79a384b","executionInfo":{"status":"ok","timestamp":1564647287324,"user_tz":-540,"elapsed":575,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["with open('glove.6B.50d.txt', 'r', encoding='utf-8') as f:\n","  embeddings = {}\n","  for line in f:\n","    word = line.split(\" \")[0].strip()\n","    vec = np.asarray([float(i) for i in line.split(\" \")[1:]])\n","    embeddings[word] = vec\n","    print(embeddings)\n","    break\n","      "],"execution_count":148,"outputs":[{"output_type":"stream","text":["{'the': array([ 4.1800e-01,  2.4968e-01, -4.1242e-01,  1.2170e-01,  3.4527e-01,\n","       -4.4457e-02, -4.9688e-01, -1.7862e-01, -6.6023e-04, -6.5660e-01,\n","        2.7843e-01, -1.4767e-01, -5.5677e-01,  1.4658e-01, -9.5095e-03,\n","        1.1658e-02,  1.0204e-01, -1.2792e-01, -8.4430e-01, -1.2181e-01,\n","       -1.6801e-02, -3.3279e-01, -1.5520e-01, -2.3131e-01, -1.9181e-01,\n","       -1.8823e+00, -7.6746e-01,  9.9051e-02, -4.2125e-01, -1.9526e-01,\n","        4.0071e+00, -1.8594e-01, -5.2287e-01, -3.1681e-01,  5.9213e-04,\n","        7.4449e-03,  1.7778e-01, -1.5897e-01,  1.2041e-02, -5.4223e-02,\n","       -2.9871e-01, -1.5749e-01, -3.4758e-01, -4.5637e-02, -4.4251e-01,\n","        1.8785e-01,  2.7849e-03, -1.8411e-01, -1.1514e-01, -7.8581e-01])}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GZLA-aZlROgW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":73},"outputId":"a66c3f39-3a70-4863-c9e5-bfbb57933200","executionInfo":{"status":"ok","timestamp":1564647739769,"user_tz":-540,"elapsed":496,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["for w,i in word_index.items():\n","  print(w,i)\n","  if i == 2:\n","    break"],"execution_count":152,"outputs":[{"output_type":"stream","text":["<PAD> 0\n","<OOV> 1\n","? 2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sOqWBqbgRozJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"outputId":"2d09dfc0-a13b-4fee-a4f2-59de4a8dc588","executionInfo":{"status":"ok","timestamp":1564647793472,"user_tz":-540,"elapsed":514,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["'the' in embeddings"],"execution_count":153,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":153}]},{"cell_type":"code","metadata":{"id":"4OWLKUOFr0tB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"outputId":"580c5c8f-2eb6-46a4-bfbf-07a2dedc6dc5","executionInfo":{"status":"ok","timestamp":1564648702934,"user_tz":-540,"elapsed":8198,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["def load_glove_embeddings(path):\n","    embeddings = {}\n","    with open(path, 'r', encoding='utf-8') as f:\n","        for line in f:\n","            word = line.split(\" \")[0].strip() # strip은 줄단위 삭제하는 것.\n","            vec = np.asarray([float(i) for i in line.split(\" \")[1:]])\n","            # vectors = np.asarray(values[1:],dtype='float32')\n","            embeddings[word] = vec\n","\n","    embedding_matrix = np.random.uniform(-1, 1, size=(vocab_size, 50))\n","    num_loaded = 0 # 5000개 단어중 몇개나 Glove에서 불러와서 update하는 건지 나타내므로 증가시키면 된다.\n","    for w, i in word_index.items():\n","        # Your code here\n","        try:\n","          if w in embeddings and i>1:\n","            embedding_matrix[i-2] = embeddings[w]\n","            num_loaded += 1\n","        except:\n","          print(i)\n","        \n","        # Glove에 있는 단어가 있는지 확인하고 있으면 Glove 단어로 하고, 없으면 놨두면 된다.\n","        # 임베딩 행렬은 첫단에 있어서 분산에 영향을 덜받는다.\n","\n","    print('Successfully loaded pretrained embeddings for '\n","          f'{num_loaded}/{vocab_size} words.')\n","    embedding_matrix = embedding_matrix.astype(np.float32)\n","    return embedding_matrix\n","\n","embedding_matrix = load_glove_embeddings('glove.6B.50d.txt')"],"execution_count":167,"outputs":[{"output_type":"stream","text":["Successfully loaded pretrained embeddings for 4425/5000 words.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"c70N63qoAKx7","colab_type":"text"},"source":["앞서 사용된 모델에서, Embedding layer의 값을 위에서 생성한 임베딩 행렬로 초기화해봅시다.\n","\n","(keras.initializers.Constant 클래스 활용)\n"]},{"cell_type":"code","metadata":{"id":"cjMv1u72r_qv","colab_type":"code","colab":{}},"source":["glove_init = keras.initializers.Constant(embedding_matrix)\n","# 내가 정한 값으로 초기화 하겠다는 게 Constant\n","\n","model = keras.Sequential([\n","   \n","    keras.layers.Embedding(vocab_size, 50, embeddings_initializer =glove_init),\n","    keras.layers.Conv1D(filters = 100,kernel_size = 4,activation=tf.nn.relu),\n","    keras.layers.Dropout(rate=0.2),\n","    keras.layers.GlobalMaxPool1D(),\n","    \n","    keras.layers.Dense(2, activation=tf.nn.softmax)\n","])\n","\n","#keras.layers.Conv1D(filters = 32,kernel_size = 3,padding = \"same\",activation=tf.nn.relu),\n","#keras.layers.GlobalMaxPool1D(),\n","#keras.layers.Dense(2, activation=tf.nn.softmax)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QGnd9iJqsk3U","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":787},"outputId":"b18df01e-3828-48e0-a39a-6512d83f5e93","executionInfo":{"status":"ok","timestamp":1564648820080,"user_tz":-540,"elapsed":5338,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}}},"source":["model.compile(optimizer='adam', \n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","history = model.fit(train_inputs,\n","          train_labels,\n","          epochs=10,\n","          validation_data=(test_inputs, test_labels)\n","         )\n","\n","plot_loss(history)\n","eval_model(model)"],"execution_count":170,"outputs":[{"output_type":"stream","text":["Train on 1961 samples, validate on 217 samples\n","Epoch 1/10\n","1961/1961 [==============================] - 2s 847us/sample - loss: 0.6902 - acc: 0.5798 - val_loss: 0.6854 - val_acc: 0.5253\n","Epoch 2/10\n","1961/1961 [==============================] - 0s 118us/sample - loss: 0.5799 - acc: 0.6828 - val_loss: 0.6324 - val_acc: 0.5945\n","Epoch 3/10\n","1961/1961 [==============================] - 0s 113us/sample - loss: 0.4853 - acc: 0.7833 - val_loss: 0.6104 - val_acc: 0.6544\n","Epoch 4/10\n","1961/1961 [==============================] - 0s 111us/sample - loss: 0.4135 - acc: 0.8465 - val_loss: 0.5622 - val_acc: 0.7235\n","Epoch 5/10\n","1961/1961 [==============================] - 0s 122us/sample - loss: 0.3431 - acc: 0.8975 - val_loss: 0.5417 - val_acc: 0.7143\n","Epoch 6/10\n","1961/1961 [==============================] - 0s 112us/sample - loss: 0.2781 - acc: 0.9286 - val_loss: 0.5118 - val_acc: 0.7097\n","Epoch 7/10\n","1961/1961 [==============================] - 0s 114us/sample - loss: 0.2289 - acc: 0.9521 - val_loss: 0.5631 - val_acc: 0.7373\n","Epoch 8/10\n","1961/1961 [==============================] - 0s 112us/sample - loss: 0.1843 - acc: 0.9628 - val_loss: 0.4957 - val_acc: 0.7419\n","Epoch 9/10\n","1961/1961 [==============================] - 0s 114us/sample - loss: 0.1488 - acc: 0.9781 - val_loss: 0.4957 - val_acc: 0.7558\n","Epoch 10/10\n","1961/1961 [==============================] - 0s 123us/sample - loss: 0.1095 - acc: 0.9852 - val_loss: 0.4963 - val_acc: 0.7512\n","217/217 [==============================] - 0s 58us/sample - loss: 0.4963 - acc: 0.7512\n","Test accuracy: 0.7511521\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"fuiL4-uoVjg5","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}