{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MNIST_softmax_regression.ipynb의 사본","version":"0.3.2","provenance":[{"file_id":"13hl1w8rBZbxuvrEF4d7sStLqUUAr6U4D","timestamp":1564539059010}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"lDxmgu4flT_g","colab_type":"code","colab":{}},"source":["import math\n","import random\n","import matplotlib.pyplot as plt\n","from datetime import datetime\n","import tensorflow as tf\n","\n","from tensorflow.examples.tutorials.mnist import input_data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TpJCi_homZTd","colab_type":"code","outputId":"a73b7269-004a-486e-abd3-a5be5fc2a17f","executionInfo":{"status":"ok","timestamp":1564539106965,"user_tz":-540,"elapsed":1530,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}},"colab":{"base_uri":"https://localhost:8080/","height":849}},"source":["mnist = input_data.read_data_sets(\"./data\", one_hot=True)\n","r = random.randint(0, mnist.train.num_examples - 1)\n","plt.imshow(mnist.train.images[r:r+1].reshape(28, 28),\n","           cmap='Greys', interpolation='nearest')\n","plt.show()\n","\n","# epoch 하나의 트레이닝 데이터셋 전체를 1 epoch (ex. 10만개)\n","# batch는 10만개 -> 100개로 쪼개서 backpropogation."],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0731 02:11:42.797524 139840413636480 deprecation.py:323] From <ipython-input-2-7950cd9991ba>:1: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","W0731 02:11:42.800580 139840413636480 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please write your own downloading logic.\n","W0731 02:11:42.804230 139840413636480 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/base.py:252: _internal_retry.<locals>.wrap.<locals>.wrapped_fn (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use urllib or similar directly.\n","W0731 02:11:42.912943 139840413636480 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n"],"name":"stderr"},{"output_type":"stream","text":["Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\n","Extracting ./data/train-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["W0731 02:11:43.216570 139840413636480 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","W0731 02:11:43.219310 139840413636480 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.one_hot on tensors.\n","W0731 02:11:43.313684 139840413636480 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n"],"name":"stderr"},{"output_type":"stream","text":["Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\n","Extracting ./data/train-labels-idx1-ubyte.gz\n","Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n","Extracting ./data/t10k-images-idx3-ubyte.gz\n","Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n","Extracting ./data/t10k-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n+IGgCD8QFOEHgiL8QFCEHwiKcf4c1Lo+/Lhx45L1WlNN16oDjWDPDwRF+IGgCD8QFOEHgiL8QFCE\nHwiK8ANB1Qy/mZ1vZn8wsz+a2S4z++ds+UNmtt/Mtma3Ga1vF0Be6vmSzxeSfu7ub5nZtyRtMbNX\ns9oSd3+ide0BaJWa4Xf3A5IOZPc/MrN3JJ3X6sYAtNYpfeY3sx5J35V04tpQd5nZdjPrM7Ozq6zT\na2ZlMysPDAw01SyA/NQdfjP7pqTfSvqZux+T9CtJ35E0RZUjg18Mt567L3X3kruXurq6cmgZQB7q\nCr+ZjVUl+Kvc/XeS5O6H3H3Q3b+U9GtJcWejBEages72m6TnJL3j7k8OWd495Gk/lrQz//YAtEo9\nZ/uvkXSbpB1mduIa0fdJmmdmUyS5pH5JP2lJhwBaop6z/RslDfeD9bX5twOgXfiGHxAU4QeCIvxA\nUIQfCIrwA0ERfiAowg8ERfiBoAg/EBThB4Ii/EBQhB8IivADQRF+IChz9/ZtzGxA0t4hi8ZLOtK2\nBk5Np/bWqX1J9NaoPHv7W3ev63p5bQ3/1zZuVnb3UmENJHRqb53al0RvjSqqNw77gaAIPxBU0eFf\nWvD2Uzq1t07tS6K3RhXSW6Gf+QEUp+g9P4CCFBJ+M5tuZv9jZu+b2T1F9FCNmfWb2Y5s5uFywb30\nmdlhM9s5ZNk5Zvaqmb2X/R12mrSCeuuImZsTM0sX+t512ozXbT/sN7Mxkv5X0vcl7ZP0pqR57v7H\ntjZShZn1Syq5e+FjwmZ2naTjkla4+2XZsn+XdNTdH8v+4Tzb3f+lQ3p7SNLxomduziaU6R46s7Sk\nWZL+UQW+d4m+5qiA962IPf9USe+7+253/4uk30iaWUAfHc/dX5N09KTFMyUtz+4vV+V/nrar0ltH\ncPcD7v5Wdv8jSSdmli70vUv0VYgiwn+epD8NebxPnTXlt0taZ2ZbzKy36GaGMTGbNl2SDkqaWGQz\nw6g5c3M7nTSzdMe8d43MeJ03Tvh93TR3v0LSDyX9NDu87Uhe+czWScM1dc3c3C7DzCz9V0W+d43O\neJ23IsK/X9L5Qx5/O1vWEdx9f/b3sKQX1XmzDx86MUlq9vdwwf38VSfN3DzczNLqgPeuk2a8LiL8\nb0q6yMwmm9k4SXMlrSmgj68xszOyEzEyszMk/UCdN/vwGknzs/vzJb1UYC9f0SkzN1ebWVoFv3cd\nN+O1u7f9JmmGKmf8/0/SvxbRQ5W+LpC0LbvtKro3Sc+rchj4uSrnRhZIOlfSeknvSfq9pHM6qLf/\nlLRD0nZVgtZdUG/TVDmk3y5pa3abUfR7l+irkPeNb/gBQXHCDwiK8ANBEX4gKMIPBEX4gaAIPxAU\n4QeCIvxAUP8PDKlkD6K5K4AAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"rrrCZ4ptmqrx","colab_type":"text"},"source":["## Placeholders"]},{"cell_type":"code","metadata":{"id":"jQWy_FHNlvX6","colab_type":"code","colab":{}},"source":["# PLACEHOLDERS\n","model_inputs = tf.placeholder(dtype=tf.float32, shape=[None, 784])\n","labels = tf.placeholder(dtype=tf.float32, shape=[None, 10]) # None 부분이 batch 갯수가 될 것임.\n","global_step = tf.Variable(0, name='global_step', trainable=False) # trainable : 학습이 되는지 안되는지 정함.\n","# 100개가 1번 지나면 1step. 이 step을 증가 시킴. \n","\n","# pretrain된 것을 그대로 사용하려면 False, 나에 맞춰 하고싶으면 True."],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ejya_BrbmupN","colab_type":"text"},"source":["## Variables"]},{"cell_type":"code","metadata":{"id":"j0YN-jkxlzTd","colab_type":"code","colab":{}},"source":["# VARIABLES\n","w = tf.Variable(tf.random_normal(shape=[784, 10]))\n","b = tf.Variable(tf.random_normal(shape=[10]))\n","\n","tf.summary.histogram('weight',w) # 넣으려면 세션에서 또 콜을해줘야한다."],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n4_HAqzdmLMC","colab_type":"text"},"source":["## Build a Model"]},{"cell_type":"code","metadata":{"id":"WNQtYEPQl35u","colab_type":"code","colab":{}},"source":["logits = tf.matmul(model_inputs, w) + b\n","predictions = tf.nn.softmax(logits) # softmax, 0~9까지 확률 뽑아줌."],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wGWopJDLl5bR","colab_type":"code","colab":{}},"source":["# PREDICTION, 모델이 예측한것과 같으면 1, 아니면 0\n","compare_pred = tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))\n","\n","# ACCURACY\n","accuracy = tf.reduce_mean(tf.cast(compare_pred, \"float\"))\n","tf.summary.scalar('acc',accuracy)\n","\n","# COST FUNCTION\n","loss = tf.reduce_mean(-tf.reduce_sum(labels*tf.log(predictions), reduction_indices=1))\n","\n","tf.summary.scalar('loss',loss) # 나중에 텐서보드 콜하면 알아서 그려짐\n","\n","# OPTIMIZER, TRAIN OPERATION # loss를 업데이트.\n","train_op = tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(loss, global_step=global_step)\n","\n","merged = tf.summary.merge_all() # 텐서보드를 다 모아주는 operation"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jz2FZMrfnIyK","colab_type":"text"},"source":["## Train a Model (session call)"]},{"cell_type":"code","metadata":{"id":"glKuQxUhl9Eu","colab_type":"code","outputId":"dc94d7ce-9724-4090-e493-d7def35ea9ea","executionInfo":{"status":"error","timestamp":1564540259818,"user_tz":-540,"elapsed":129805,"user":{"displayName":"군고구마","photoUrl":"https://lh5.googleusercontent.com/-I0XUuvaS1h0/AAAAAAAAAAI/AAAAAAAAAC4/1a-GQoFjqY4/s64/photo.jpg","userId":"10196243389166907276"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["with tf.Session() as sess:\n","        # tesorboard를 이벤트라는거로 생각해서 이벤트를 띄우는 것.\n"," \t\t\t\ttimestamp = datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n"," \t\t\t\twriter = tf.summary.FileWriter('./logs/%s' % timestamp, sess.graph)\n"," \t\t\t\tsaver = tf.train.Saver() # 나중에 학습된 모델을 저장하는 것.\n","        # default : 모든 인자가 다들어 가는것. 내가 지정해서 넣을 수도 있음.\n","        # 나중에 부를 때 variable name으로 부르므로 중요하다.\n","\n","\t\t\t\tsess.run(tf.global_variables_initializer())\n","\t\t\t\n","\t\t\t\tfor i in range(50):\n","\t\t\t\t\t\tavg_loss = 0.\n","\t\t\t\t\t\tfor step in range(10000):\n","                # 내부적으로 784매트릭스로 가지고 있다.\n","\t\t\t\t\t\t\t\tbatch_images, batch_labels = mnist.train.next_batch(100)\n","                \n","                \n","\t\t\t\t\t\t\t\tfeeds_train = {model_inputs: batch_images, labels: batch_labels}\n","\t\t\t\t\t\t\t\t_, loss_val, global_step_val,s summary_val = \\\n","                sess.run([train_op, loss, global_step, merged], feed_dict=feeds_train)\n","\t\t\t\t\t\t\t\tavg_loss += loss_val # 데이터에 따라서 loss가 들쭉날쭉해서 평균을 내서 보여준다.\n","\n","\t\t\t\t\t\t\t\tif (step+1) % 1000 == 0:\n","\t\t\t\t\t\t\t\t\t\tprint (\"step {} | loss : {}\".format(step+1, avg_loss/(step+1)))\n","                    writer.add_summary(summary_val,global_step= \\\n","                                      global_step_val) # 1000번에 한번씩 텐서보드 업데이트\n","                    \n","                    # 나중에 tensorboard 열어서 보면 됨 \n","                    \n","\n","                    \n","                  \n","\t\t\t\t\t\tfeeds_test = {model_inputs: mnist.test.images, labels: mnist.test.labels}\n","\t\t\t\t\t\ttrain_acc = sess.run(accuracy, feed_dict=feeds_train)\n","\t\t\t\t\t\ttest_acc = sess.run(accuracy, feed_dict=feeds_test)\n","            # 10000번 돌때마다 성능을 평가함\n","            \n","\t\t\t\t\t\tprint(\"idx: %02d/50 cost: %.3f train_acc: %.3f test_acc: %.3f\"\n","\t\t\t\t\t\t      % (i+1, avg_loss/(step+1), train_acc, test_acc))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["step 1000 | loss : 6.865363301753998\n","step 2000 | loss : 4.951848323881626\n","step 3000 | loss : 4.009395980258783\n","step 4000 | loss : 3.4289617371559142\n","step 5000 | loss : 3.038659082663059\n","step 6000 | loss : 2.7525043927232424\n","step 7000 | loss : 2.533494163858039\n","step 8000 | loss : 2.3585445005744696\n","step 9000 | loss : 2.2161122033364244\n","step 10000 | loss : 2.096779647825658\n","idx: 01/50 cost: 2.097 train_acc: 0.720 test_acc: 0.802\n","step 1000 | loss : 0.9785064324140549\n","step 2000 | loss : 0.9609709876477719\n","step 3000 | loss : 0.9434546662618717\n","step 4000 | loss : 0.9265595112480223\n","step 5000 | loss : 0.9138416364580393\n","step 6000 | loss : 0.9001624119256934\n","step 7000 | loss : 0.8877466487373624\n","step 8000 | loss : 0.8760477799028158\n","step 9000 | loss : 0.8654171939922704\n","step 10000 | loss : 0.8546673971563578\n","idx: 02/50 cost: 0.855 train_acc: 0.880 test_acc: 0.844\n","step 1000 | loss : 0.7490829110741616\n","step 2000 | loss : 0.7383717721290887\n","step 3000 | loss : 0.7326006242657701\n","step 4000 | loss : 0.726017005385831\n","step 5000 | loss : 0.7189643122807146\n","step 6000 | loss : 0.7131471470383306\n","step 7000 | loss : 0.7077943781710097\n","step 8000 | loss : 0.7024245927976445\n","step 9000 | loss : 0.6972764146932298\n","step 10000 | loss : 0.6918185512647033\n","idx: 03/50 cost: 0.692 train_acc: 0.830 test_acc: 0.863\n","step 1000 | loss : 0.6430854348093271\n","step 2000 | loss : 0.6372242773026228\n","step 3000 | loss : 0.6328945806423824\n","step 4000 | loss : 0.6282915495485067\n","step 5000 | loss : 0.6244757210820914\n","step 6000 | loss : 0.6219507903407018\n","step 7000 | loss : 0.6178378947845528\n","step 8000 | loss : 0.6145314871519804\n","step 9000 | loss : 0.6111691635151704\n","step 10000 | loss : 0.608435000565648\n","idx: 04/50 cost: 0.608 train_acc: 0.920 test_acc: 0.874\n","step 1000 | loss : 0.5689810095280409\n","step 2000 | loss : 0.5710467194579542\n","step 3000 | loss : 0.5697044566447537\n","step 4000 | loss : 0.5670849019568414\n","step 5000 | loss : 0.564861606271565\n","step 6000 | loss : 0.5627645246696968\n","step 7000 | loss : 0.5601818279570767\n","step 8000 | loss : 0.5582910755164922\n","step 9000 | loss : 0.5560419998723599\n","step 10000 | loss : 0.5541820565007627\n","idx: 05/50 cost: 0.554 train_acc: 0.820 test_acc: 0.880\n","step 1000 | loss : 0.5307716004252434\n","step 2000 | loss : 0.529942113056779\n","step 3000 | loss : 0.5269476229374608\n","step 4000 | loss : 0.5252396157365292\n","step 5000 | loss : 0.5240751493498683\n","step 6000 | loss : 0.5227488834212224\n","step 7000 | loss : 0.5202770715334586\n","step 8000 | loss : 0.5190832751132548\n","step 9000 | loss : 0.517978169211083\n","step 10000 | loss : 0.5161734270513058\n","idx: 06/50 cost: 0.516 train_acc: 0.880 test_acc: 0.884\n","step 1000 | loss : 0.5011891853660345\n","step 2000 | loss : 0.4977495228983462\n","step 3000 | loss : 0.4978787240708868\n","step 4000 | loss : 0.49519913113862274\n","step 5000 | loss : 0.4948836598515511\n","step 6000 | loss : 0.4933740631043911\n","step 7000 | loss : 0.49207856138689177\n","step 8000 | loss : 0.4911658296175301\n","step 9000 | loss : 0.489544040977127\n","step 10000 | loss : 0.4884118508964777\n","idx: 07/50 cost: 0.488 train_acc: 0.870 test_acc: 0.887\n","step 1000 | loss : 0.4755462415963411\n","step 2000 | loss : 0.4745893738493323\n","step 3000 | loss : 0.47246413170794643\n","step 4000 | loss : 0.47195390666276216\n","step 5000 | loss : 0.47114803853482007\n","step 6000 | loss : 0.4699107116597394\n","step 7000 | loss : 0.4690383689094867\n","step 8000 | loss : 0.4682903128573671\n","step 9000 | loss : 0.46714534293197923\n","step 10000 | loss : 0.46597690262421965\n","idx: 08/50 cost: 0.466 train_acc: 0.940 test_acc: 0.889\n","step 1000 | loss : 0.4531778505071998\n","step 2000 | loss : 0.4552377170175314\n","step 3000 | loss : 0.45409197461853423\n","step 4000 | loss : 0.45262209833227096\n","step 5000 | loss : 0.4519049190789461\n","step 6000 | loss : 0.451689141822358\n","step 7000 | loss : 0.45048040168732406\n","step 8000 | loss : 0.44977868974208834\n","step 9000 | loss : 0.44894452560610243\n","step 10000 | loss : 0.44811019886136055\n","idx: 09/50 cost: 0.448 train_acc: 0.880 test_acc: 0.891\n","step 1000 | loss : 0.43907787731289866\n","step 2000 | loss : 0.43819961772486565\n","step 3000 | loss : 0.4382032643035054\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-acbc32caef27>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                                                                 \u001b[0mfeeds_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mmodel_inputs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbatch_images\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbatch_labels\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                                                                 \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglobal_step_val\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglobal_step\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeeds_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                                                                 \u001b[0mavg_loss\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mloss_val\u001b[0m \u001b[0;31m# 데이터에 따라서 loss가 들쭉날쭉해서 평균을 내서 보여준다.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    948\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 950\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    951\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    952\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1171\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mfeed_dict_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1172\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m-> 1173\u001b[0;31m                              feed_dict_tensor, options, run_metadata)\n\u001b[0m\u001b[1;32m   1174\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1175\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1348\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1349\u001b[0m       return self._do_call(_run_fn, feeds, fetches, targets, options,\n\u001b[0;32m-> 1350\u001b[0;31m                            run_metadata)\n\u001b[0m\u001b[1;32m   1351\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1352\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_prun_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeeds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1354\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1355\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1356\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1357\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1358\u001b[0m       \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run_fn\u001b[0;34m(feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[1;32m   1339\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1340\u001b[0m       return self._call_tf_sessionrun(\n\u001b[0;32m-> 1341\u001b[0;31m           options, feed_dict, fetch_list, target_list, run_metadata)\n\u001b[0m\u001b[1;32m   1342\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1343\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_prun_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_call_tf_sessionrun\u001b[0;34m(self, options, feed_dict, fetch_list, target_list, run_metadata)\u001b[0m\n\u001b[1;32m   1427\u001b[0m     return tf_session.TF_SessionRun_wrapper(\n\u001b[1;32m   1428\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1429\u001b[0;31m         run_metadata)\n\u001b[0m\u001b[1;32m   1430\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1431\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_tf_sessionprun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"Blmt4_dW29JR","colab_type":"code","colab":{}},"source":["# 떨어지는 지점이 생기는 게 overfitting이라고 보면 된다."],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"q1ZyK9ob7X9I","colab_type":"code","colab":{}},"source":["import os\n","os.environ[\"CUDA_VISIBLE_DEVICE\"] =\"0,1,2\" # 여러개 쓰는 방법.\n","os.environ[\"CUDA_VISIBLE_DEVICE\"] = \"-1\" # CPU쓰는 것. \n","\n","# 서버는 보통 리눅스 환경이 많다."],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8Yr3FF9uML7p","colab_type":"code","colab":{}},"source":["def foo():\n","  with tf.variable_scope('foo',reuse=tf.AUTO_REUSE): # scope를 지정 # 이름을 지정\n","    v = tf.variable(name=variable,[1])\n","  return v\n","\n","v1 = foo()\n","v2 = foo()\n","assert v1 == v2\n","\n","print('v1:',v1)\n","print('v2:',v2)\n","v3 = [v for v in tf.global_variables() if v.name == 'foo/variable:0']\n","print(\"v3:\",v3)"],"execution_count":0,"outputs":[]}]}